hydra:
  run:
    dir: .
  sweep:
    dir: .
    subdir: .
  job_logging:
    root:
      level: INFO

# Global variables 
seed: 0
save_dir: "./exp/${wandb.group}/${wandb.name}"
debug: False

# Agents  
agent1: 'LOLA'
agent2: 'LOLA'

# Environment
env_id: ipd
game: ipd 
env_type: finite
env_discount: 0.96
payoff: [[-1,-1], [-3,0], [0,-3], [-2,-2]]
centralized: True

# Training hyperparameters
num_envs: 10
num_steps: 100 # number of steps per episode
total_timesteps: 100_000_000
eval_every: 50_000 # eval every n episodes, not timesteps


# Useful information
# num_episodes = total_timesteps / (num_steps * num_envs) 
# num_updates = num_episodes / eval_every
# batch_size = num_envs * num_steps

# DQN agent parameters
dqn: 
  batch_size: 256
  discount: 0.99
  learning_rate: 1e-2
  epsilon: 0.5
  replay_capacity: 100000
  min_replay_size: 1000
  sgd_period: 1 
  target_update_period: 4 

# PPO agent parameters
ppo:
  num_minibatches: 10
  num_epochs: 4 
  gamma: 0.75
  gae_lambda: 0.95
  ppo_clipping_epsilon: 0.2
  value_coeff: 0.5
  clip_value: True
  max_gradient_norm: 0.5
  anneal_entropy: True
  entropy_coeff_start: 0.2 
  entropy_coeff_horizon: 500_000
  # for halfway, the horizon should (1/2) * (total_timesteps / num_envs)
  entropy_coeff_end: 0.01
  lr_scheduling: True
  learning_rate: 2.5e-3
  adam_epsilon: 1e-5
  adam_eps_root: 0.
  with_memory: False

# Naive Learner parameters
naive:
  lr: 1.0

# LOLA agent parameters
lola: 
  replay_capacity: 1000 #args.lola.replay_capacity, 
  min_replay_size: 50   #args.lola.min_replay_size, 
  sgd_period: 1           #args.dqn.sgd_period,
  batch_size: 2         #args.dqn.batch_size

# Logging setup
wandb:
  entity: "ucl-dark"
  project: ipd
  group: 'LOLA-vs-${agent2}-${game}'
  name: run-seed-${seed}
  log: False
